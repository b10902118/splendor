
double score1(const card &cd) {
    static constexpr double c[6] = {0,       1 * 1,    1.2 * 2,
                                    1.3 * 3, 1.45 * 4, 1.55 * 5};
    double deduction = 0;
    for (int i = 0; i < Gem::normal; ++i) {
        int cost = cd.cost[i] - my.bns[i];
        if (cost > 0) deduction += c[cost];
    }
#ifdef SPLENDER_DEBUG
    // cout << 10 - deduction << endl;
#endif
    return 10 - deduction;
}

double score2(const card &cd) {
    static constexpr double c1 = 1.2, c2 = 1.3; // c1*n - c2*pt
    double deduction = 0;
    for (int i = 0; i < Gem::normal; ++i) {
        int cost = cd.cost[i] - my.bns[i];
        if (cost > 0) deduction += c1 * cost;
    }
#ifdef SPLENDER_DEBUG
    // cout << score - c2 * cd.score << '\n';
#endif
    return 10 - (deduction - c2 * cd.score);
}

double score3(const card &cd) {
    static constexpr double c1 = 1.2, c2 = 1.3;
    double deduction = 0;
    // cout << cd.gem << ": ";
    for (int i = 0; i < Gem::normal; ++i) {
        int cost = cd.cost[i] - my.bns[i];
        // cout << cost << ' ';
        if (cost > 0) deduction += c1 * (cost - 1); // not reasonable
    }
#ifdef SPLENDER_DEBUG
    // cout << deduction - c2 * cd.score << '\n';
#endif
    return 10 - (deduction - c2 * cd.score);
}
