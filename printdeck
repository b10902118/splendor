    cout << stack_1.size() << ' ' << stack_2.size() << ' ' << stack_3.size() << '\n';
    int cnt[lvn][Gem::normal]{};
    for (auto c : stack_1) {
        ++cnt[0][c.gem];
        cout << c.gem << ' ' << c.cost[0] << ' ' << c.cost[1] << ' ' << c.cost[2] << ' '
             << c.cost[3] << ' ' << c.cost[4] << '\n';
    }
    for (auto c : stack_2) {
        ++cnt[1][c.gem];
        cout << c.gem << ' ' << c.cost[0] << ' ' << c.cost[1] << ' ' << c.cost[2] << ' '
             << c.cost[3] << ' ' << c.cost[4] << '\n';
    }
    for (auto c : stack_3) {
        ++cnt[2][c.gem];
        cout << c.gem << ' ' << c.cost[0] << ' ' << c.cost[1] << ' ' << c.cost[2] << ' '
             << c.cost[3] << ' ' << c.cost[4] << '\n';
    }
    for (int j = 0; j < lvn; ++j) {
        cout << "tier" << j + 1 << ": ";
        for (int i : cnt[j]) cout << i << ' ';
        cout << endl;
    }
