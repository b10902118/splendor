
void update(profile &p, const int cid, const int type) {
    assert(type == BUY || type == RES);
    if (type == BUY) {
        for (auto it = p.res.begin(); it != p.res.end(); ++it) {
            if (it->c.id == cid) {
                for (int k = 0; k < Gem::normal; ++k) {
                    p.gem[k] -= it->c.cost[k];
                    if (p.gem[k] < 0) {
                        p.gem[Gem::joker] += p.gem[k];
                        p.gem[k] = 0;
                    }
                }
                p.pts += it->c.score;
                ++p.bns[it->c.gem];
                ++p.bns_sum;
                p.res.erase(it);
                return;
            }
        }
    }
    for (int i = 0; i < deckn; ++i) {
        for (int j = 0; j < table.row; ++j) {
            if (table[i][j].id == cid) {
                if (type == BUY) {
                    for (int k = 0; k < Gem::normal; ++k) {
                        p.gem[k] -= table[i][j].cost[k];
                        if (p.gem[k] < 0) {
                            p.gem[Gem::joker] += p.gem[k];
                            p.gem[k] = 0;
                        }
                    }
                    p.pts += table[i][j].score;
                    ++p.bns[table[i][j].gem];
                    ++p.bns_sum;
                    table[i][j] = deck[i].pop();
                }
                else { // type==RES
                    p.res.push_back(ResCard(table[i][j], i));
                    ++p.gem[Gem::joker];
                    table[i][j] = deck[i].pop();
                }
                return;
            }
        }
    }
}
